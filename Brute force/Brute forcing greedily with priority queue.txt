// Problem: D. The Strongest Build
// Contest: Codeforces - Educational Codeforces Round 114 (Rated for Div. 2)
// URL: https://codeforces.com/contest/1574/problem/D
// Memory Limit: 256 MB
// Time Limit: 3000 ms
// Author:      Tarun Kumar
// Institution: IET Lucknow

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#define ll long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define yes cout<<"YES\n"
#define no cout<<"NO\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;bool debug=false;

int main()
{FAST;ll t=1,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    // cin>>t;while(t--)
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n;
        vll a[n+1];
        
        map<vll,bool> done;
        map<vll,bool> ban;
        
        pair<ll,vll> cur;
        cur.ff=0;
        cur.ss.pb(0);
        
        f1(i,n)
        {
        	cin>>x;
        	a[i].pb(0);////
        	
        	f0(j,x)
        	{
        		cin>>tmp;
        		a[i].pb(tmp);
        	}
        	
        	cur.ss.pb(x);
        	cur.ff+=a[i][x];
        }
        
        
        cin>>m;
        
        vll b[m+1];
        // map<ll,ll>M[n+1];
        
        f1(i,m)
        {
        	b[i].pb(0);
        	
        	sum=0;
        	f1(j,n)
        	{
        		cin>>x;
        		b[i].pb(x);
        		sum+=x;
        	}
        	ban[b[i]]=true;
        	// ban[{sum,b[i]}]=true;
        }
        
        
        // pigeonhole principle
        // (m+1)th is always valid(but not always max)
        
        
        set<pair<ll,vll>> st;
        st.insert(cur);
        
        // while(st.size())
        
        pair<ll,vll> sol;
        sol.ff=-1;
        sol.ss.pb(-1);sol.ss.pb(-1);
        sol.ss.pb(-1);sol.ss.pb(-1);
        sol.ss.pb(-1);sol.ss.pb(-1);
        
        for(;;)
        {
        	cur=*st.rbegin();
        	st.erase(cur);
        	
        	if(ban[cur.ss]==false)
        	{
        		sol=cur;
        		break;
        	}
        	
        	f1(i,n)
        	{
        		tmp=cur.ff-a[i][cur.ss[i]];
        		cur.ss[i]--;
        		
        		if(cur.ss[i]<1)
        		{
        			cur.ss[i]++;
        			continue;
        		}
        		
        		// if(done[cur.ss])
        		// continue;
        		
        		tmp+=a[i][cur.ss[i]];
        		st.insert({tmp,cur.ss});
        		// done[cur.ss]=true;
        		
        		cur.ss[i]++;
        	}
        }
        
        assert(sol.ff!=-1);
        
        f1(i,n)
        {
        	cout<<sol.ss[i]<<" ";
        }
        
        // cout<<ans<<ln;
    }
	return 0;
}
// Hope is the last thing ever lost
