// Problem: F. Four Divisors
// Contest: Codeforces - Educational Codeforces Round 12
// URL: https://codeforces.com/contest/665/problem/F
// Memory Limit: 768 MB
// Time Limit: 10000 ms
// Author:      Tarun Kumar
// Institution: IET Lucknow

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#define ll long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define yes cout<<"YES\n"
#define no cout<<"NO\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;bool debug=false;


////////////////////////
namespace pcf
{
///   Prime-Counting Function
///   initialize once by calling init()
///   Legendre(n) and Lehmer(n) returns the number of primes less than or equal to n
///   Lehmer(n) is faster
 
#define MAXN 1000010 /// initial sieve limit
#define MAX_PRIMES 1000010 /// max size of the prime array for sieve
#define PHI_N 100000
#define PHI_K 100
 
unsigned int ar[(MAXN >> 6) + 5] = {0};
int len = 0; /// total number of primes generated by sieve
int primes[MAX_PRIMES];
int counter[MAXN]; /// counter[m] --> number of primes <= i
int phi_dp[PHI_N][PHI_K]; /// precal of phi(n,k)
 
bitset <MAXN> isComp;
//bool isComp[MAXN];
void Sieve(int N)
{
    int  i,j,sq = sqrt(N);
    isComp[1] = true;
    for(i=4; i<=N; i+=2) isComp[i] = true;
    for(i=3; i<=sq; i+=2)
    {
        if(!isComp[i])
        {
            for(j=i*i; j<=N; j+=i+i) isComp[j] = 1;
        }
    }
    for (i = 1; i <= N; i++)
    {
        if (!isComp[i]) primes[len++] = i;
        counter[i] = len;
    }
}
 
void init()
{
    Sieve(MAXN - 1);
 
    /// precalculation of phi upto size (PHI_N,PHI_K)
    int k, n, res;
    for(n = 0; n < PHI_N; n++) phi_dp[n][0] = n;
    for (k = 1; k < PHI_K; k++)
    {
        for (n = 0; n < PHI_N; n++)
        {
            phi_dp[n][k] = phi_dp[n][k - 1] - phi_dp[n / primes[k - 1]][k - 1];
        }
    }
}
 
/// returns number of integers less or equal n which are
/// not divisible by any of the first k primes
/// recurrence --> phi( n , k ) = phi( n , k-1 ) - phi( n / p_k , k-1)
long long phi(long long n, int k)
{
    if (n < PHI_N && k < PHI_K) return phi_dp[n][k];
    if (k == 1) return ((++n) >> 1);
    if (primes[k - 1] >= n) return 1;
    return phi(n, k - 1) - phi(n / primes[k - 1], k - 1);
}
 
 
long long Legendre(long long n)
{
    if (n < MAXN) return counter[n];
 
    int lim = sqrt(n) + 1;
    int k = upper_bound(primes, primes + len, lim) - primes;
    return phi(n, k) + (k - 1);
}
 
///complexity: n^(2/3).(logn)^(1/3)
long long Lehmer(long long n)
{
    if (n < MAXN) return counter[n];
 
    long long w, res = 0;
    int i, j, a, b, c, lim;
    b = sqrt(n), c = Lehmer(cbrt(n)), a = Lehmer(sqrt(b)), b = Lehmer(b);
    res = phi(n, a) + (((b + a - 2) * (b - a + 1)) >> 1);
 
    for (i = a; i < b; i++)
    {
        w = n / primes[i];
        lim = Lehmer(sqrt(w)), res -= Lehmer(w);
 
        if (i <= c)
        {
            for (j = i; j < lim; j++)
            {
                res += j;
                res -= Lehmer(w / primes[j]);
            }
        }
    }
    return res;
}
}
//////////////


int main()
{FAST;ll t=1,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    
    pcf::init();
    
    
    // cout<<pcf::Lehmer(100)<<ln;
    // hi;
    
    // simple sieve only
    // x=pcf::len;
    // cout<<x<<" "<<pcf::primes[x-1]<<ln;
    
    
    // cin>>t;while(t--)
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n;
        
        
        // CASE: p*p*p
        f0(i,pcf::len)
        {
        	tmp=pcf::primes[i];
        	
        	if(tmp*tmp*tmp<=n) ans++;
        	else break;
        }
        
        // CASE: p*q
        f0(i,pcf::len)
        {
        	p=pcf::primes[i];
        	q=n/p;
        	
        	if(p>q) break;
        	
        	tmp=pcf::Lehmer(q)-pcf::Lehmer(p);
        	ans+=tmp;
        }
        
        cout<<ans<<ln;
    }
	return 0;
}
// Hope is the last thing ever lost
