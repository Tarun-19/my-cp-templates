#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ll long long int
#define ull unsigned long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define mp make_pair
#define ff first
#define ss second
#define bs binary_search
#define lb lower_bound
#define ub upper_bound
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define lcm(x,y) boost::math::lcm(x,y)
#define display(x) for(auto dsp:x)cout<<dsp<<" ";
#define hi cout<<"hi\n";
#define ln "\n"
using namespace std;
const ld pi=acos(-1);
const ll mod=1e9+7;
const ll MAX=INT_MAX;
const ll MIN=INT_MIN;

string decToBinary(ll n) 
{ 
	if(n==0) return "0";/////added
    // array to store binary number 
    ll binaryNum[35]; //64
  
    ll i=0; 
    while(n>0){
        binaryNum[i]=n%2;
        n=n/2;i++;
    }
    string s="";
    // prlling binary array in reverse order 
    for (ll j=i-1;j>=0;j--)
    {
        if(binaryNum[j])
        s+="1";
        else
        s+="0";
    }
    return s;
}

ll binaryToDecimal(string n) 
{ 
    string num=n;
    ll dec_value=0;
    ll base=1;
    ll len=num.length();
    ll i;
    for(i=len-1;i>=0;i--){
    if(num[i]=='1')
    dec_value+=base;
    base=base*2;
    }
  
    return dec_value; 
} 

int main()
{
    FAST;
    ll t,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m;
    string s;
    char ch;
    vll v;
    vpll vec;
    unordered_map<ll,ll> mappu;
    
    cin>>t;
    while(t--)
    {
        cin>>n;f=0;sum=0;p=0;q=0;flag=0;ans=0;v.clear();mappu.clear();vec.clear();
        ll a[n];
        f0(i,n)
        cin>>a[i];
        
        
        
        
        
        
        
        
        
        
    }
	return 0;
}
