#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#define ll long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define yes cout<<"YES\n"
#define no cout<<"NO\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;bool debug=false;

const ll mxm=2e5+200;

vll adj[mxm];
vll trans[mxm];
bitset<mxm> vis;

vll order,scc;


void dfs(ll n)
{
	if(vis[n])
	return;
	
	vis[n]=1;
	
	for(auto it:adj[n])
	{
		if(vis[it])
		{
			continue;
		}
		dfs(it);
	}
	
	order.pb(n);
	
}


void dfs_trans(ll n)
{
	
	if(vis[n])
	return;
	
	vis[n]=1;
	
	for(auto it:trans[n])
	{
		if(vis[it])
		{
			continue;
		}
		dfs_trans(it);
	}
	
	scc.pb(n);
}

/*
Input:
1

7 8

1 2
2 3
3 1
4 3
7 4
7 5
5 6
6 7

Output:
Current source:5
->6 7 5 
Current source:4
->4 
Current source:1
->2 3 1 

*/


int main()
{FAST;ll t=1,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    cin>>t;while(t--)
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n>>m;
        
        order.clear();
        
        f0(i,n+2)
        {
        	vis[i]=0;
        	adj[i].clear();
        	trans[i].clear();
        }
        
        f0(i,m)
        {
        	cin>>l>>r;
        	adj[l].pb(r);
        	trans[r].pb(l);
        }
        
        
        f1(i,n)// getting order of dfs tree:)
        {
        	if(vis[i])
        	{
        		continue;
        	}
        	
        	dfs(i);
        }
        
        
        f0(i,n+3)
        {
        	vis[i]=0;
        }
        
        
        reverse(all(order));
        
        f0(i,n)// starting from 0:)
        {
        	if(vis[order[i]])
        	{
        		continue;
        	}
        	scc.clear();
        	
        	dfs_trans(order[i]);
        	
        	
        	cout<<"Current source:"<<order[i]<<ln;
        	cout<<"->";
        	display(scc);
        	
        }
        
        // cout<<ans<<ln;
    }
	return 0;
}
// When the going gets tough,
// only the tough gets going!!

