// Problem: E. Bertown roads
// Contest: Codeforces - Codeforces Beta Round #89 (Div. 2)
// URL: https://codeforces.com/problemset/problem/118/E
// Memory Limit: 256 MB
// Time Limit: 5000 ms
// Author:      Tarun Kumar
// Institution: IET Lucknow

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#define ll long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define yes cout<<"YES\n"
#define no cout<<"NO\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;bool debug=false;
const ll mxm=2e5+55;

vll adj[mxm];
ll in[mxm];
ll low[mxm];
bitset<mxm>vis;

ll timer=0;
bool found=false;

vpll sol;


void dfs(ll n,ll par)
{
	vis[n]=1;
	
	in[n]=low[n]=timer++;
	
	for(auto it:adj[n])
	{
		if(it==par)
		continue;
		
		if(vis[it])
		{
			//back
			low[n]=min(low[n],in[it]);
			
			if(in[n]>in[it])
			sol.pb({n,it});
		}
		else
		{
			dfs(it,n);
			
			if(in[n]<low[it])
			{
				found=true;
				return;///////// /:)
			}
			//frwd
			sol.pb({n,it});
			
			low[n]=min(low[n],low[it]);
		}
	}
	
}

int main()
{FAST;ll t=1,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    // cin>>t;while(t--)
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        
        timer=0;
        cin>>n>>m;
        
        f1(i,m)
        {
        	cin>>l>>r;
        	adj[l].pb(r);
        	adj[r].pb(l);
        }
        
        dfs(1,-1);
        
        // a graph admits an orientation to a SCC digraph
        // if and only if
        // every edge is part of a cycle
        
        if(found)
        {
        	cout<<0;
        	exit(0);
        }
        
        assert(sol.size()==m);
        
        
        for(auto it:sol)
        {
        	cout<<it.ff<<" "<<it.ss<<ln;
        }
        
        // cout<<ans<<ln;
    }
	return 0;
}
// When the going gets tough,
// only the tough gets going!!
