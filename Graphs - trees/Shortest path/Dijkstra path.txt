/*  Author: Tarun Kumar
    E-mail: tarunkumar281200@gmail.com

    Don't stop until you feel proud.(P.S. don't feel proud;)
*/#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ll long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;
const ll MAX=2e5+10;

vector<pair<ll,ll>>adj[MAX];
ll dist[MAX];// set to zero:)

ll path_par[MAX];


void dijkstra_algorithm(ll source)// (n+m)*log(n)
{
    ll cur,cur_dis,i;
    priority_queue <pair<ll,ll>,vector<pair<ll,ll>>,greater<pair<ll,ll>>> pq;
    
    dist[source]=0;
    pq.push({0,source});
    
    while(!pq.empty())
    {
        cur=pq.top().ss;
        cur_dis=pq.top().ff;
        pq.pop();

	if(cur_dis > dist[cur]) continue;

	// if(cur == destination), then return from here. But don't do it inside for loop:)
        
        for(auto it:adj[cur])
        {
            if(cur_dis+it.ss<dist[it.ff])
            {
                dist[it.ff]=cur_dis+it.ss;
                pq.push({dist[it.ff],it.ff});
                path_par[it.ff]=cur;
                
            }
        }
    }
    
    // f1(i,5) cout<<dist[i]<<" ";cout<<ln;// make n global if possible:)
    
}

int main()
{FAST;ll t,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    t=1;
    // cin>>t;while(t--)
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n>>m;
        
        f0(i,n+5)
        {
            dist[i]=1e18;
            adj[i].clear();
            path_par[i]=i;
        }
        
        f0(i,m)
        {
            cin>>l>>r>>x;// l->r (wt)
            adj[l].pb({r,x});
            adj[r].pb({l,x});// undirected
        }
        
        ll source,target;
        source=1;target=n;
        // cin>>source>>target;
        
        dijkstra_algorithm(source);
        
        ans=dist[target];
        
        if(ans==1e18)
        {
            cout<<-1;
            return 0;
        }// else cout<<ans<<ln;
        
        // f1(i,n) cout<<path_par[i]<<" ";
        // cout<<ln;
        vll path;
        p=n;
        path.pb(n);
        while(p!=1)
        {
            p=path_par[p];
            path.pb(p);
        }
        reverse(all(path));
        display(path);
    }
	return 0;
}
// https://codeforces.com/problemset/problem/20/C
