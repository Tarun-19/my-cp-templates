/*  Author: Tarun Kumar
    E-mail: tarunkumar281200@gmail.com

    Don't stop until you feel proud.(P.S. don't feel proud;)
*/#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ll int
#define ld long double
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;

// Problem
/*
(Legend will be corrected later) We have n integers.
The first number becomes the root of the tree, for the rest, you need to implement adding to the search tree and output for each n - 1 number of its immediate ancestor in the tree.

Input data
The first line contains one integer n (2 ≤ n ≤ 105) - the number of numbers. The second line contains n different space-separated integers ai (1 ≤ ai ≤ 109).

Output
For all i> 1 print the immediate ancestor ai
*/

struct node
{
    ll val;
    node* l; // left
    node* r; // right
};

map<ll,ll> anc;

node* newnode(ll val)
{
    node *tmp=new node();
    tmp->val=val;
    tmp->l=NULL;
    tmp->r=NULL;
    return tmp;
}

node* insert_node(node* root,ll val)
{
    if(root==NULL)
    {
        root=newnode(val);
        return root;
    }
    
    if(val<=root->val) root->l=insert_node(root->l,val);
    else root->r=insert_node(root->r,val);
    
    return root;
}

void store_ancestor(node* root)
{
    if(root->l!=NULL)
    {
        anc[root->l->val]=root->val;
        store_ancestor(root->l);
    }
    if(root->r!=NULL)
    {
        anc[root->r->val]=root->val;
        store_ancestor(root->r);
    }
}

int main()
{FAST;ll t,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    t=1;
    // cin>>t;while(t--)
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n;
        ll a[n];
        f0(i,n)
        {
            cin>>tmp;
            a[i]=tmp;
        }
        
        node *root=NULL;
        // root->val=a[0];
        
        f0(i,n)
        root=insert_node(root,a[i]);
        
        store_ancestor(root);
        
        // You are using naive BST...
        // Naive BST height can go upto N if array is in ascending order
        // This is O(N^2) implementation
        
        //  successfully wasted 5hrs:)
        
        f1(i,n-1) cout<<anc[a[i]]<<" ";
        
    }
	return 0;
}
// You didn't come this far to only come this far