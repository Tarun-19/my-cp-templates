// Problem: E2. Array Optimization by Deque
// Contest: Codeforces - Codeforces Round #744 (Div. 3)
// URL: https://codeforces.com/contest/1579/problem/E2
// Memory Limit: 256 MB
// Time Limit: 2000 ms
// Author:      Tarun Kumar
// Institution: IET Lucknow

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#define ll long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define yes cout<<"YES\n"
#define no cout<<"NO\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;bool debug=false;

ll cnt;

void merge(ll a[],ll l,ll md,ll r)
{
    ll tmp[r-l+1];
    
    ll i=l,j=md+1,k=0;
    
    while(i<=md&&j<=r)
    {
        if(a[i]<=a[j])
        {
            tmp[k++]=a[i];
            i++;
        }
        else
        {
            tmp[k++]=a[j];
            j++;
            cnt+=(md-i+1);
        }
    }
    
    
    while(i<=md)
    {
        tmp[k++]=a[i];
        i++;
    }
    while(j<=r)
    {
        tmp[k++]=a[j];
        j++;
    }
    
    fab(i,l,r)
    a[i]=tmp[i-l];
}


void merge_sort(ll a[],ll l,ll r)
{
    if(l<r)
    {
        ll md=(l+r)/2;
        
        merge_sort(a,l,md);
        merge_sort(a,md+1,r);
        
        merge(a,l,md,r);
    }
}

#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#define ordered_set tree<ll, null_type,less_equal<ll>, rb_tree_tag,tree_order_statistics_node_update>
using namespace __gnu_pbds;


int main()
{FAST;ll t=1,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    cin>>t;while(t--)
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n;
        ll a[n];
        
        ordered_set st1,st2;
        
        f0(i,n)
        {
            cin>>tmp;
            a[i]=tmp;
            // mappu[tmp]++;
        }
        
        cnt=0;// inversion
        
        // merge_sort(a,0,n-1);
        // cout<<cnt<<ln;
        
        
        // (1,2),3  (2,1),3 will have same inversion count
        // 3,(1,2)  3,(2,1) will have same inversion count
        
        // always simplify implementation before coding u moron
        
        for(auto it:a)
        {
        	l=st1.order_of_key(it);// strictly smaller than it
        	r=st2.order_of_key(-it);// strictly smaller than -it= strictly greater than it:)
        	
        	ans+=min(l,r);
        	st1.insert(it);
        	st2.insert(-it);
        }
        
        
        cout<<ans<<ln;
    }
	return 0;
}
// Hope is the last thing ever lost
