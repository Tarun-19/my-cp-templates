/*  Author: Tarun Kumar
    E-mail: tarunkumar281200@gmail.com

    Don't stop until you feel proud.(P.S. don't feel proud;)
*/#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ll int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;
const ll N=30010;
ll a[N];
unordered_set<ll> st[4*N];
// unordered_set<ll> lazy[10*N];

void build(ll si,ll ss,ll se)
{
    if(ss==se)
    {
        st[si].insert(a[ss]);
        return;
    }
    
    ll md=(ss+se)/2;
    build(2*si,ss,md);
    build(2*si+1,md+1,se);
    
    st[si].insert(st[2*si].begin(),st[2*si].end());
    st[si].insert(st[2*si+1].begin(),st[2*si+1].end());
}


unordered_set<ll> query(ll si,ll ss,ll se,ll qs,ll qe)
{
    // if(lazy[si].size()!=0)
    // {
    //     unordered_set<ll> tmp=lazy[si];
    //     lazy[si].clear();
        
    //     st[si].insert(tmp.begin(),tmp.end());
        
    //     if(ss!=se)
    //     {
    //         lazy[2*si].insert(tmp.begin(),tmp.end());
    //         lazy[2*si+1].insert(tmp.begin(),tmp.end());
    //     }
    // }
    
    unordered_set<ll>res;
    if(qe<ss||qs>se) return res;
    if(qe>=se&&qs<=ss) return st[si];// whole unordered_set:)
    
    ll md=(ss+se)/2;
    
    unordered_set<ll> l=query(2*si,ss,md,qs,qe);
    unordered_set<ll> r=query(2*si+1,md+1,se,qs,qe);
    
    
    res.insert(l.begin(),l.end());
    res.insert(r.begin(),r.end());
    
    return res;
}

// Updation is wrong bcz your code is not able to remove elements from si:)
// void update(ll si,ll ss,ll se,ll qs,ll qe,ll val)
// {
//     if(lazy[si].size()!=0)
//     {
//         unodered_set<ll> tmp=lazy[si];
//         lazy[si].clear();
        
//         st[si].insert(tmp.begin(),tmp.end());
        
//         if(ss!=se)
//         {
//             lazy[2*si].insert(tmp.begin(),tmp.end());
//             lazy[2*si+1].insert(tmp.begin(),tmp.end());
//         }
//     }
    
//     if(qe<ss||qs>se) return;
//     if(qe>=se&&qs<=ss)
//     {
//         st[si].insert(val);
        
//         if(ss!=se)
//         {
//             lazy[2*si].insert(val);
//             lazy[2*si+1].insert(val);
//         }
//         return;
//     }
    
    
//     ll md=(ss+se)/2;
    
//     update(2*si,ss,md,qs,qe,val);
//     update(2*si+1,md+1,se,qs,qe,val);
    
//     st[si].insert(st[2*si].begin(),st[2*si].end());
//     st[si].insert(st[2*si+1].begin(),st[2*si+1].end());
// }

int main()
{FAST;ll t,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    t=1;
    // cin>>t;while(t--) // horrible
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n;
        
        f1(i,n) cin>>a[i];
        
        build(1,1,n);
        cin>>q;
        while(q--)
        {
            // cin>>z;
            z=1;
            
            if(z==0)
            {
                // cin>>pos>>ch;
                // x=ch;l=r=pos;
                // update(1,1,n,l,r,x);
            }
            else
            {
                cin>>l>>r;
                unordered_set<ll> sol=query(1,1,n,l,r);
                cout<<sol.size()<<ln;
            }
        }
    }
	return 0;
}
