// RMQSQ
/*  Author: Tarun Kumar
    E-mail: tarunkumar281200@gmail.com

    " A code is like love,
        it has created with clear intentions at the beginning,
            but it can get complicated:) "
*/#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ll long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;
bool sortbysec(pair<ll,ll> a,pair<ll,ll> b)//(i+1,i)
{return (a.second<b.second);}

ll tree[4*1000000],a[1000000];
ll tree_gcd[4*1000000];

void build(ll si,ll ss,ll se)//index,start,end
{
    if(ss==se)
    {
        tree[si]=a[ss];
        return;
    }
    
    ll md=(ss+se)/2;
    
    build(2*si,ss,md);
    build(2*si+1,md+1,se);
    
    tree[si]=min(tree[2*si],tree[2*si+1]);
}
//
void build_gcd(ll si,ll ss,ll se)//index,start,end
{
    if(ss==se)
    {
        tree_gcd[si]=a[ss];
        return;
    }
    
    ll md=(ss+se)/2;
    
    build_gcd(2*si,ss,md);
    build_gcd(2*si+1,md+1,se);
    
    tree_gcd[si]=__gcd(tree_gcd[2*si],tree_gcd[2*si+1]);
}



ll query(ll si,ll ss,ll se,ll qs,ll qe)
{
    if(ss>qe||se<qs)
    return 10000000000;
    
    if(ss>=qs&&se<=qe)
    return tree[si];
    
    ll md=(ss+se)/2;
    
    ll l=query(2*si,ss,md,qs,qe);
    ll r=query(2*si+1,md+1,se,qs,qe);
    
    return min(l,r);
}


ll query_gcd(ll si,ll ss,ll se,ll qs,ll qe)
{
    if(ss>qe||se<qs)
    return 0;//?
    
    if(ss>=qs&&se<=qe)
    return tree_gcd[si];
    
    ll md=(ss+se)/2;
    
    ll l=query_gcd(2*si,ss,md,qs,qe);
    ll r=query_gcd(2*si+1,md+1,se,qs,qe);
    
    return __gcd(l,r);
}



int main()
{FAST;ll t,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    t=1;
    // cin>>t;while(t--)
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n;
        f1(i,n) cin>>a[i];
        
        
        build(1,1,n);
        build_gcd(1,1,n);
        
        // display(tree);
        cin>>q;
        
        while(q--)
        {
            cin>>l>>r;// 1 based:)
            
            ans=query(1,1,n,l,r);
            
            cout<<ans<<" ";
            ans=query_gcd(1,1,n,l,r);
            cout<<ans<<ln;
        }
    }
	return 0;
}
