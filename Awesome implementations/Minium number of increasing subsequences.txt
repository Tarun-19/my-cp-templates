// https://codeforces.com/contest/847/submission/108999273
/*  Author: Tarun Kumar
    E-mail: tarunkumar281200@gmail.com

    Don't stop until you feel proud.(P.S. don't feel proud;)
*/#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define ll long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;

int main()
{FAST;ll t,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    t=1;
    // cin>>t;while(t--)
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n;
        ll a[n];
        f0(i,n)
        {
            cin>>tmp;
            a[i]=tmp;
            // mappu[tmp]++;
        }
        
        vvll vv;
        vv.pb({a[0]});
        
        f1(i,n-1)
        {
            ll low=0;
            ll high=vv.size()-1;
            pos=-1;
            
            // Observation:
            // vv[.],back() is sorted in decreasing order:)
            
            while(low<=high) // searching for largest smaller number:)
            {
                ll md=(low+high)/2;
                
                if(vv[md].back()<a[i])
                {
                    pos=md;
                    high=md-1;
                }
                else
                {
                    low=md+1;
                }
                
            }
            if(pos!=-1)
            {
                vv[pos].pb(a[i]);
            }
            else
            vv.pb({a[i]});
        }
        
        for(auto it:vv)
        {
            display(it);
        }
        
    }
	return 0;
}
// Dividing array in minimum number of increasing subsequences.
/*
Input:
5
1 3 2 5 4
Output:
1 3 5
2 4
*/