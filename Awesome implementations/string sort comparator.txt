// Problem: F1. Nearest Beautiful Number (easy version)
// Contest: Codeforces - Codeforces Round #739 (Div. 3)
// URL: https://codeforces.com/contest/1560/problem/F1
// Memory Limit: 256 MB
// Time Limit: 1000 ms
// Author:      Tarun Kumar
// Institution: IET Lucknow

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#define ll long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define yes cout<<"YES\n"
#define no cout<<"NO\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;bool debug=false;

vector<string>vv,one;

bool comp(string &a,string &b)
{
	if(a.size()==b.size())
	return a<b;
	
	return a.size()<b.size();
}


bool check(string &a,string &b)
{
	if(a.size()==b.size())
	return a<=b;
	
	return a.size()<b.size();
}


int main()
{FAST;ll t=1,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    
    
    fab(len,1,10)// 2
    {
    	
    	f0(i,1LL<<len)
    	{
    		v.clear();
    		
    		tmp=0;
    		f0(j,len)
    		{
    			p=1LL<<j;
    			if(p&i)
    			{
    				v.pb(1);
    				tmp++;
    			}
    			else
    			{
    				v.pb(0);
    			}
    		}
    		
    		if(tmp==0 or tmp==len)
    		continue;
    		
    		// display(v);
    		
    		
    		char c1,c2;
    		fab(c1,'0','9')
    		{
    			fab(c2,c1+1,'9')
    			{
    				string tp="";
    				f0(j,v.size())
    				{
    					ch=(v[j]==0)?c1:c2;
    					tp.pb(ch);
    				}
    				
    				// cout<<tp<<ln;
    				
    				if(tp.front()!='0')///////
    				vv.pb(tp);
    			}
    		}
    		
    	}
    	
    	
    	fab(ch,'1','9')
    	{
    		string tp="";
    		f0(j,len) tp.pb(ch);
    		one.pb(tp);
    	}
        
    }
    
    fab(ch,'1','9')
    {
    	string tp="";
    	tp.pb(ch);
    	vv.pb(tp);
    }
    
    // cout<<vv.size()<<ln;
    
    sort(all(vv),comp);
    sort(all(one),comp);
    // display(vv);
    
    // cout<<vv[82052]<<ln; //max
    
    cin>>t;while(t--)
    {
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n;
        cin>>k;
        
        s=to_string(n);
        
        if(k==2)
        {
        	l=0;
        	r=vv.size()-1;
        	
        	ans=1e9;
        	while(l<=r)
        	{
        		ll md=(l+r)/2;
        		
        		if(check(s,vv[md]))
        		{
        			r=md-1;
        			ans=min(ans,md);
        		}
        		else
        		{
        			l=md+1;
        		}
        	}
        	// cout<<vv[ans]<<ln;
        	
        	ll k2=ans;
        	
        	
        	l=0;
        	r=one.size()-1;
        	
        	ans=1e9;
        	while(l<=r)
        	{
        		ll md=(l+r)/2;
        		
        		if(check(s,one[md]))
        		{
        			r=md-1;
        			ans=min(ans,md);
        		}
        		else
        		{
        			l=md+1;
        		}
        	}
        	// cout<<one[ans]<<ln;
        	
        	
        	// cout<<one[ans]<<" "<<vv[k2]<<ln;
        	
        	if(check(one[ans],vv[k2]))
        	cout<<one[ans]<<ln;
        	else
        	cout<<vv[k2]<<ln;
        }
        else
        {
        	
        	
        	
        	l=0;
        	r=one.size()-1;
        	
        	ans=1e9;
        	while(l<=r)
        	{
        		ll md=(l+r)/2;
        		
        		if(check(s,one[md]))
        		{
        			r=md-1;
        			ans=min(ans,md);
        		}
        		else
        		{
        			l=md+1;
        		}
        	}
        	cout<<one[ans]<<ln;
        	
        }
        
        // cout<<ans<<ln;
    }
	return 0;
}
// When the going gets tough,
// only the tough gets going!!