// Problem: F. Array Stabilization (AND version)
// Contest: Codeforces - Codeforces Round #744 (Div. 3)
// URL: https://codeforces.com/contest/1579/problem/F
// Memory Limit: 256 MB
// Time Limit: 2000 ms
// Author:      Tarun Kumar
// Institution: IET Lucknow

#include <bits/stdc++.h>
#define FAST ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
#define ll long long int
#define ld long double
#define vll vector<ll>
#define vvll vector<vector<ll>>
#define vpll vector<pair<ll,ll>>
#define prqueue priority_queue<ll,vector<ll>,greater<ll>>// top=small
#define pb push_back
#define pf push_front
#define ppb pop_back
#define ppf pop_front
#define ff first
#define ss second
#define all(v) v.begin(), v.end()
#define f0(i,n) for(i=0;i<n;i++)
#define f1(i,n) for(i=1;i<=n;i++)
#define fab(i,a,b) for(i=a;i<=b;i++)
#define f0r(i,n) for(i=n-1;i>=0;i--)
#define f1r(i,n) for(i=n;i>=1;i--)
#define fabr(i,a,b) for(i=b;i>=a;i--)
#define memo(a,b) memset(a,b,sizeof(a))
#define display(x) {for(auto dsp:x)cout<<dsp<<" ";cout<<"\n";}
#define hi cout<<"hi\n"
#define yes cout<<"YES\n"
#define no cout<<"NO\n"
#define ln "\n"
using namespace std;
const ld pi=acos(-1);const ll mod=1e9+7;bool debug=false;

int main()
{FAST;ll t=1,n,i,j,k,len,x,y,z,c,f,flag,p,q,mx,mn,l,r,sum,ans,tmp,it,pos,avg,m,cnt;
    string s;char ch;vll v;vpll vec;unordered_map<ll,ll> mappu;pair<ll,ll> pr;
    cin>>t;while(t--)
    {
    	ll d;
        f=0;sum=0;flag=0;ans=0;cnt=0;v.clear();mappu.clear();vec.clear();
        cin>>n>>d;
        
        
        // If stuck,always think in this order
        // sort,bs,pq,dq,convert to graph,dp,sk,vis,adj.seg
        
        
        queue<pair<ll,ll>> Q;
        
        ll a[n]={0};// visited type
        
        f0(i,n)
        {
            cin>>tmp;
            if(!tmp)
            {
            	Q.push({i,0});
            }
            else f++;
            a[i]=tmp;
        }
        
        // list of all 1's will be absent
        
        
        // 2n max
        while(Q.size())
        {
        	pr=Q.front();
        	Q.pop();
        	
        	pos=(pr.ff+d)%n;
        	
        	if(a[pos]==0)
        	continue;
        	
        	a[pos]=0;
        	f--;
        	
        	Q.push({pos,pr.ss+1});
        	ans=max(ans,pr.ss+1);
        	
        }
        
        if(f) cout<<-1<<ln;
        else cout<<ans<<ln;
        
        // cout<<ans<<ln;
    }
	return 0;
}
// Hope is the last thing ever lost
